#1
from abc import ABC, abstractmethod

class Middle(ABC):
    def __init__(self, user_votes, expert_votes):
        self.user_votes = user_votes
        self.expert_votes = expert_votes

    def get_correct_user_votes(self):
        """Возвращает нормализованный список пользовательских оценок.
        Для каждого класса можно переопределить, если нужно."""
        return [vote for vote in self.user_votes if 10 < vote < 90]

    def get_correct_expert_votes(self):
        """Возвращает нормализованный список оценок критиков."""
        return [vote for vote in self.expert_votes if 5 < vote < 95]

    @abstractmethod
    def get_average(self, users=True):
        """Возвращает среднее значение. Реализовать в наследниках."""
        pass

    def get_correct_votes(self, users=True):
        """Вспомогательный метод для получения правильных оценок."""
        if users:
            return self.get_correct_user_votes()
        else:
            return self.get_correct_expert_votes()

class Average(Middle):
    def get_average(self, users=True):
        votes = self.get_correct_votes(users)
        if not votes:
            return 0
        return sum(votes) / len(votes)

class Median(Middle):
    def get_average(self, users=True):
        votes = sorted(self.get_correct_votes(users))
        if not votes:
            return 0
        return votes[len(votes) // 2]

class Harmonic(Middle):
    def get_average(self, users=True):
        votes = self.get_correct_votes(users)
        if not votes:
            return 0
        return len(votes) / sum(map(lambda vote: 1 / vote, votes))
#2
from abc import ABC, abstractmethod

class ChessPiece(ABC):
    def __init__(self, horizontal, vertical):
        self.horizontal = horizontal
        self.vertical = vertical

    @abstractmethod
    def can_move(self, target_horizontal, target_vertical):
        pass

class King(ChessPiece):
    def can_move(self, target_horizontal, target_vertical):
        # Преобразуем горизонтальные координаты в числовой формат
        start_x = ord(self.horizontal)
        target_x = ord(target_horizontal)
        start_y = self.vertical
        target_y = target_vertical

        #  разница по горизонтали и вертикали не более 1
        if abs(target_x - start_x) <= 1 and abs(target_y - start_y) <= 1:
            # Исключаем случай, когда фигура остается на месте
            if target_x == start_x and target_y == start_y:
                return False
            return True
        return False

class Knight(ChessPiece):
    def can_move(self, target_horizontal, target_vertical):
        start_x = ord(self.horizontal)
        target_x = ord(target_horizontal)
        start_y = self.vertical
        target_y = target_vertical

        dx = abs(target_x - start_x)
        dy = abs(target_y - start_y)

        # Ход коня: перемещение по букве и числу в виде "буква-число" в форме (2, 1) или (1, 2)
        return (dx == 2 and dy == 1) or (dx == 1 and dy == 2)

if __name__ == "__main__":
    king = King('b', 2)
    print(king.can_move('c', 3))  # True
    print(king.can_move('a', 1))  # True
    print(king.can_move('f', 7))  # False
#3
from abc import ABC, abstractmethod

class Validator(ABC):
    def __init__(self):
        self._value_name = None  # имя атрибута, закреплённого за дескриптор

    def __set_name__(self, owner, name):
        # при создании дескриптора, ему передается имя атрибута
        self._value_name = name

    def __get__(self, instance, owner):
        if instance is None:
            return self
        if self._value_name not in instance.__dict__:
            raise AttributeError("Атрибут не найден")
        return instance.__dict__[self._value_name]

    def __set__(self, instance, value):
        self.validate(value)
        instance.__dict__[self._value_name] = value

    @abstractmethod
    def validate(self, value):
        pass


class Number(Validator):
    def __init__(self, minvalue=None, maxvalue=None):
        super().__init__()
        self.minvalue = minvalue
        self.maxvalue = maxvalue

    def validate(self, value):
        if not isinstance(value, (int, float)):
            raise TypeError("Устанавливаемое значение должно быть числом")
        if (self.minvalue is not None) and (value < self.minvalue):
            raise ValueError(f"Устанавливаемое число должно быть больше или равно {self.minvalue}")
        if (self.maxvalue is not None) and (value > self.maxvalue):
            raise ValueError(f"Устанавливаемое число должно быть меньше или равно {self.maxvalue}")


class String(Validator):
    def __init__(self, minsize=None, maxsize=None, predicate=None):
        super().__init__()
        self.minsize = minsize
        self.maxsize = maxsize
        self.predicate = predicate

    def validate(self, value):
        if not isinstance(value, str):
            raise TypeError("Устанавливаемое значение должно быть строкой")
        if (self.minsize is not None) and (len(value) < self.minsize):
            raise ValueError(f"Длина устанавливаемой строки должна быть больше или равна {self.minsize}")
        if (self.maxsize is not None) and (len(value) > self.maxsize):
            raise ValueError(f"Длина устанавливаемой строки должна быть меньше или равна {self.maxsize}")
        if self.predicate is not None:
            if not self.predicate(value):
                raise ValueError("Устанавливаемая строка не удовлетворяет дополнительным условиям")