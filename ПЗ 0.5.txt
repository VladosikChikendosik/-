#1
def is_context_manager(obj):
    return hasattr(obj, '__enter__') and hasattr(obj, '__exit__')
#2
class SuppressAll:
    def __init__(self):
        # Конструктор без аргументов
        pass

    def __enter__(self):
        # Возвращает self или ничего не возвращает
        return self

    def __exit__(self, exc_type, exc_value, traceback):
        # Подавляем все исключения, возвращая True
        return True
#3
class Greeter:
    def __init__(self, name):
        self.name = name

    def __enter__(self):
        print(f"Приветствую, {self.name}!")
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        print(f"До встречи, {self.name}!")
        # Возвращаем False, чтобы пробросить исключения, если они есть
        return False
#4
class Closer:
    def __init__(self, obj):
        self.obj = obj

    def __enter__(self):
        # Возвращаем объект для использования внутри блока with
        return self.obj

    def __exit__(self, exc_type, exc_value, traceback):
        # Проверяем, поддерживает ли объект метод close
        if hasattr(self.obj, 'close') and callable(self.obj.close):
            self.obj.close()
        else:
            print("Незакрываемый объект")
        # Возвращаем False, чтобы не подавлять исключения внутри блока with
        return False


output = open('output.txt', 'w', encoding='utf-8')

#5
class ReadableTextFile:
    def __init__(self, filename):
        self.filename = filename
        self.file = None

    def __enter__(self):
        self.file = open(self.filename, 'r', encoding='utf-8')
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        if self.file:
            self.file.close()

    def __iter__(self):
        # Итератор по строкам файла без символа переноса строки
        for line in self.file:
            yield line.rstrip('\n')
#6
class Reloopable:
    def __init__(self, file):
        self.file = file
        self._file = None

    def __enter__(self):
        # Открываем файл для чтения при входе в контекст
        self._file = open(self.file.name, 'r', encoding=self.file.encoding if hasattr(self.file, 'encoding') else None)
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        # Закрываем файл при выходе из контекста
        if self._file:
            self._file.close()

    def __iter__(self):
        # Итерация по файлу
        self._file.seek(0)
        return iter(self._file)
