#1
def hash_function(obj):
    # Преобразуем объект в строку
    s = str(obj)
    length = len(s)

    # Шаг 1: Вычисление temp1
    temp1 = 0
    for i in range(length // 2):
        temp1 += ord(s[i]) * ord(s[length - 1 - i])

    # Если длина нечетная, добавляем средний элемент
    if length % 2 == 1:
        temp1 += ord(s[length // 2])

    # Шаг 2: Вычисление temp2
    temp2 = 0
    for i in range(length):
        if i % 2 == 0:
            temp2 += ord(s[i]) * (i + 1)
        else:
            temp2 -= ord(s[i]) * (i + 1)

    # Шаг 3: Вычисление итогового хеша
    result = (temp1 * temp2) % 123456791

    return result
#2
def limited_hash(left, right, hash_function=hash):
    def wrapper(obj):
        # Вычисляем хеш-значение
        h = hash_function(obj)

        # Преобразуем его в диапазон [left; right]
        range_size = right - left + 1

        if left <= h <= right:
            return h
        elif h > right:
            return left + (h - right - 1) % range_size
        else:  # h < left
            return right - (left - h - 1) % range_size

    return wrapper
 
#3
class ColoredPoint:
    def __init__(self, x, y, color):
        self._x = x
        self._y = y
        self._color = color

    @property
    def x(self):
        return self._x

    @property
    def y(self):
        return self._y

    @property
    def color(self):
        return self._color

    def __repr__(self):
        return f"ColoredPoint({self.x}, {self.y}, '{self.color}')"

    def __eq__(self, other):
        if not isinstance(other, ColoredPoint):
            return NotImplemented
        return (self.x, self.y, self.color) == (other.x, other.y, other.color)

    def __ne__(self, other):
        if not isinstance(other, ColoredPoint):
            return NotImplemented
        return not self.__eq__(other)

    def __hash__(self):
        return hash((self.x, self.y, self.color))

# Примеры использования